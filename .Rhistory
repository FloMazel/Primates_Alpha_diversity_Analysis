ggplot(SpeciesDataTable_Order,aes(y=mean_Observed_5k,x=ED_ES))+geom_point()+stat_smooth(method = "lm",se = F)+facet_wrap(~order)
ggplot(SpeciesDataTable_Order,aes(y=mean_Observed_5k,x=MPD))+geom_point()+stat_smooth(method = "lm",se = F)+facet_wrap(~order)
Primates$MPD
Primates$MPD/2
ggplot(Primates,aes(y=mean_Observed_5k,x=ED_FP))+geom_point()+stat_smooth(method = "lm",se = F)
ggplot(Primates,aes(y=mean_Observed_5k,x=BodyMAss))+geom_point()+stat_smooth(method = "lm",se = F)
head(Primates)
SpeciesDataTable=data.frame(Taxo %>%
group_by(TimeTree_returned) %>%
summarize(mean_PD_5k = mean(pd_5k, na.rm = TRUE),
mean_PD_10k = mean(pd_10k, na.rm = TRUE),
mean_Observed_5k= mean(Observed_5k, na.rm = TRUE),
mean_Chao1_5k= mean(Chao1_5k, na.rm = TRUE),
mean_ACE_5k= mean(Chao1_5k, na.rm = TRUE),
sd_PD_5k = sd(pd_5k, na.rm = TRUE),
sd_PD_10k = sd(pd_10k, na.rm = TRUE),
sd_Observed_5k= sd(Observed_5k, na.rm = TRUE),
sd_SR= sd(SR, na.rm = TRUE),
sd_Chao1_5k= sd(Chao1_5k, na.rm = TRUE),
sd_ACE_5k= sd(Chao1_5k, na.rm = TRUE),
Class=unique(Taxonomy_Class),
BodyMass=mean(ET.BodyMass.Value, na.rm = TRUE),
order=unique(Taxonomy_Order)))
rownames(SpeciesDataTable)=SpeciesDataTable$TimeTree_returned
SpeciesDataTable$ED_FP=SpeciesDataTable$ED_ES=SpeciesDataTable$MPD=NA
# Fair Prop
SpeciesDataTable[as.character(ED_FP_birds$Species),"ED_FP"]=ED_FP_birds$w
SpeciesDataTable[as.character(ED_FP_mmf$Species),"ED_FP"]=ED_FP_mmf$w
# Equal Split
SpeciesDataTable[as.character(ED_ES_mmf$Species),"ED_ES"]=ED_ES_mmf$w
SpeciesDataTable[as.character(ED_ES_birds$Species),"ED_ES"]=ED_ES_birds$w
# Originality
SpeciesDataTable[names(MDP_mmf),"MPD"]=MDP_mmf
SpeciesDataTable[names(MDP_birds),"MPD"]=MDP_birds
head(SpeciesDataTable)
i="Primates"
Primates=SpeciesDataTable_Order[as.character(SpeciesDataTable_Order$order)%in%i,]
ggplot(Primates,aes(y=mean_Observed_5k,x=BodyMAss))+geom_point()+stat_smooth(method = "lm",se = F)
ggplot(Primates,aes(y=mean_Observed_5k,x=BodyMass))+geom_point()+stat_smooth(method = "lm",se = F)
Primates
SpeciesDataTable_Order=SpeciesDataTable[SpeciesDataTable$order%in%names(table(SpeciesDataTable$order))[table(SpeciesDataTable$order)>5],]
i="Primates"
Primates=SpeciesDataTable_Order[as.character(SpeciesDataTable_Order$order)%in%i,]
Primates$MPD/2
ggplot(Primates,aes(y=mean_Observed_5k,x=BodyMass))+geom_point()+stat_smooth(method = "lm",se = F)
ggplot(Primates,aes(y=ED_FP,x=BodyMass))+geom_point()+stat_smooth(method = "lm",se = F)
?lm
lm(mean_Observed_5k~BodyMass,data=Primates)
Primates
lm(mean_Observed_5k~BodyMass,data=Primates,na.action =na.rm )
lm(mean_Observed_5k~BodyMass,data=Primates,na.action =na.rm() )
lm(mean_Observed_5k~BodyMass,data=Primates,na.action =na.omit)
summary(lm(mean_Observed_5k~BodyMass,data=Primates,na.action =na.omit))
summary(lm(mean_Observed_5k~ED_FP,data=Primates,na.action =na.omit))
summary(lm(mean_Observed_5k~BodyMass+ED_FP,data=Primates,na.action =na.omit))
annova(lm(mean_Observed_5k~BodyMass+ED_FP,data=Primates,na.action =na.omit))
anova(lm(mean_Observed_5k~BodyMass+ED_FP,data=Primates,na.action =na.omit))
?anova
i="Cetartiodactyta"
Primates=SpeciesDataTable_Order[as.character(SpeciesDataTable_Order$order)%in%i,]
Primates$MPD/2
SpeciesDataTable_Order
ggplot(SpeciesDataTable_Order,aes(y=mean_Observed_5k,x=ED_FP))+geom_point()+stat_smooth(method = "lm",se = F)+facet_wrap(~order)
i="Cetartiodactyla"
Primates=SpeciesDataTable_Order[as.character(SpeciesDataTable_Order$order)%in%i,]
Primates$MPD/2
ggplot(Primates,aes(y=mean_Observed_5k,x=ED_FP))+geom_point()+stat_smooth(method = "lm",se = F)
ggplot(Primates,aes(y=mean_Observed_5k,x=BodyMass))+geom_point()+stat_smooth(method = "lm",se = F)
ggplot(Primates,aes(y=ED_FP,x=BodyMass))+geom_point()+stat_smooth(method = "lm",se = F)
summary(lm(mean_Observed_5k~BodyMass+ED_FP,data=Primates,na.action =na.omit))
install.packages()
install.packages("pcor.test")
glmm
i="Perissodactyla"
Primates=SpeciesDataTable_Order[as.character(SpeciesDataTable_Order$order)%in%i,]
Primates$MPD/2
ggplot(Primates,aes(y=mean_Observed_5k,x=ED_FP))+geom_point()+stat_smooth(method = "lm",se = F)
ggplot(Primates,aes(y=mean_Observed_5k,x=BodyMass))+geom_point()+stat_smooth(method = "lm",se = F)
ggplot(Primates,aes(y=ED_FP,x=BodyMass))+geom_point()+stat_smooth(method = "lm",se = F)
summary(lm(mean_Observed_5k~BodyMass,data=Primates,na.action =na.omit))
summary(lm(mean_Observed_5k~ED_FP,data=Primates,na.action =na.omit))
saveRDS(SpeciesDataTable,file="Desktop/Recherche/En_cours/Analyses_en_cours/Sanders_etal/SpeciesDataTable.Rdata")
2180/12
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(seqinr)
library(phyloseq)
library(vegan)
library(phylofactor)
devtools::install_github("reptalex/phylofactor")
install.packages("ggtree")
BiocManager::install("ggtree", version = "3.8")
devtools::install_github("reptalex/phylofactor")
library(phylofactor)
library(phylofactor)
library(phyloseq)
library(vegan)
################################################################################
# load packages
################################################################################
# WORKING WITH DATA
# Suite of packages for data manipulation and visualization
library(tidyverse)
# Working with raw sequences (.fasta)
library(seqinr)
# PHYLOGENETICS
# Phylogenetic factorization
library(phylofactor)
# Phylogenetic analyses of microbiomes
library(phyloseq)
# Community ecology analyses
library(vegan)
# Working with trees
library(ape)
# Additional ggplot functions for tree visualization
library(ggtree)
# OTHER
# Multi-panel figures
library(cowplot)
# FOR BDTT FUNCTIONS
# Using multidimensional arrays (part of BDTT functions)
library(abind)
install.packages("cowplot")
# FOR BDTT FUNCTIONS
# Using multidimensional arrays (part of BDTT functions)
library(abind)
# Working with matrices (part of BDTT functions)
library(Matrix)
# To manipulate large phylogenies (part of BDTT functions)
library(castor)
################################################################################
# Downloading data
################################################################################
download.file(
"https://raw.githubusercontent.com/EDUCE-UBC/workshop_data/master/Saanich.taxonomy",
"data/Saanich.taxonomy")
?download.file
download.file(
"https://github.com/FloMazel/BDTT/blob/master/BDTT_functions.R",
"scripts/BDTT_functions.R"
)
getwd()
setwd("/Users/fmazel/Documents/GitHub/workshops_R/phylogenetics/")
download.file(
"https://github.com/FloMazel/BDTT/blob/master/BDTT_functions.R",
"scripts/BDTT_functions.R"
)
download.file(
"https://github.com/FloMazel/BDTT/blob/master/BDTT_functions.R",
"scripts/BDTT_functions.R"
)
source("scripts/BDTT_functions.R")
################################################################################
# Importing custom R functions
################################################################################
download.file(
"https://raw.githubusercontent.com/FloMazel/BDTT/blob/master/BDTT_functions.R",
"scripts/BDTT_functions.R"
)
################################################################################
# Importing custom R functions
################################################################################
download.file(
"https://raw.githubusercontent.com/FloMazel/BDTT/master/BDTT_functions.R",
"scripts/BDTT_functions.R"
)
source("scripts/BDTT_functions.R")
################################################################################
# Tree constraints
################################################################################
# Define contraints
tax.constrain <- taxonomy %>%
# Remove unclassified domains
filter(domain != "unknown")
download.file(
"https://raw.githubusercontent.com/EDUCE-UBC/workshops_R/master/phylogenetics/results/Saanich_FastTree",
"results/Saanich_FastTree")
download.file(
"https://raw.githubusercontent.com/EDUCE-UBC/workshops_R/master/phylogenetics/results/Saanich_FastTree_constrain",
"results/Saanich_FastTree_constrain")
################################################################################
# Visualizing trees
################################################################################
# read.tree from the ape package
tree <- read.tree('results/Saanich_FastTree')
treeC <- read.tree('results/Saanich_FastTree_constrain')
OTU.physeq = OTU %>%
# set sample name as row names
column_to_rownames(var = "sample") %>%
# Format to matrix
as.matrix() %>%
# Format to phyloseq OTU table
otu_table(taxa_are_rows=FALSE)
# Taxonomy
tax.physeq = taxonomy %>%
# set OTU # as row names
column_to_rownames(var = "OTU") %>%
# Convert to matrix
as.matrix() %>%
# Convert to phyloseq tax table
tax_table()
# Metadata
metadata.physeq = metadata %>%
# Copy sample column
mutate(sample2 = sample) %>%
# set sample names as row names
column_to_rownames(var = "sample2") %>%
# Convert to phyloseq sample data
sample_data()
# Trees
tree.physeq=phy_tree(tree)
treeC.physeq=phy_tree(treeC)
# assemble them into phyloseq objects
saanich = phyloseq(OTU.physeq, tax.physeq,
metadata.physeq, tree.physeq)
saanichC = phyloseq(OTU.physeq, tax.physeq,
metadata.physeq, treeC.physeq)
# See objects
saanich
saanichC
##
################################################################################
# Loading and cleaning data
################################################################################
# Taxonomic identity of each sequence
taxonomy <- read_tsv("data/Saanich.taxonomy") %>%
# Separate taxa names into columns
separate(Taxonomy,
into=c("domain","phylum","class","order","family","genus","species"),
sep=";") %>%
# Remove unused columns
select(-Size)
# Counts of sequences in each sample
OTU <- read_tsv("data/Saanich_OTU.shared") %>%
# Rename sample variable
mutate(sample=Group) %>%
# Remove unused columns
select(-label, -numOtus, -Group)
# Geochemical data
metadata <- read_csv("data/Saanich_Data_clean.csv") %>%
# Filter to only Cruise 72
filter(Cruise == 72) %>%
# Create sample names similar to OTU table
mutate(sample=ifelse(Depth_m <100,
paste("Saanich_0", Depth_m, sep=""),
paste("Saanich_", Depth_m, sep="")))
################################################################################
# phyloseq formatting
################################################################################
# OTU table
OTU.physeq = OTU %>%
# set sample name as row names
column_to_rownames(var = "sample") %>%
# Format to matrix
as.matrix() %>%
# Format to phyloseq OTU table
otu_table(taxa_are_rows=FALSE)
# Taxonomy
tax.physeq = taxonomy %>%
# set OTU # as row names
column_to_rownames(var = "OTU") %>%
# Convert to matrix
as.matrix() %>%
# Convert to phyloseq tax table
tax_table()
# Metadata
metadata.physeq = metadata %>%
# Copy sample column
mutate(sample2 = sample) %>%
# set sample names as row names
column_to_rownames(var = "sample2") %>%
# Convert to phyloseq sample data
sample_data()
# Trees
tree.physeq=phy_tree(tree)
treeC.physeq=phy_tree(treeC)
# assemble them into phyloseq objects
saanich = phyloseq(OTU.physeq, tax.physeq,
metadata.physeq, tree.physeq)
saanichC = phyloseq(OTU.physeq, tax.physeq,
metadata.physeq, treeC.physeq)
# See objects
saanich
saanichC
################################################################################
# Basic trees
################################################################################
plot_tree(saanich, "treeonly") +
# Make circular
coord_polar(theta = "y") +
# Plot title
labs(title="Unconstrained tree")
#Phyla
plot_tree(saanich, color="phylum") +
# Make circular
coord_polar(theta = "y") +
# Plot title
labs(title="Unconstrained tree") +
# Move legend to bottom
theme(legend.position="bottom") +
guides(col = guide_legend(ncol = 2))
################################################################################
# Re-root the tree
################################################################################
# List all OTUs that are Archaea
archaea.list <- taxonomy %>%
filter(domain=="Archaea") %>%
select(OTU) %>%
as.list()
MRCAnode <- getMRCA(phy = treeC, tip = archaea.list$OTU)
#re-root the tree on this branch
treeC.root <- root(phy = treeC, node = MRCAnode, resolve.root = TRUE)
#save the corresponding tree to the disk
write.tree(treeC.root, 'results/Saanich_FastTree_constrain_root')
#in a new phyloseq object.
treeCR.physeq <- phy_tree(treeC.root)
saanichCR <- phyloseq(OTU.physeq, tax.physeq,
metadata.physeq, treeCR.physeq)
# Bray-Curtis
BC <- vegdist(otu_table(saanichCR), method = "bray")
# Jaccard
Jac  <- vegdist(otu_table(saanichCR), method = "jaccard")
# UniFrac
UF <- UniFrac(saanichCR, weighted=FALSE)
# Weighted UniFrac
wUF <- UniFrac(saanichCR, weighted=TRUE)
#Look at result example
BC
BC.pcoa = ordinate(saanichCR, "PCoA", distance=BC)
Jac.pcoa = ordinate(saanichCR, "PCoA", distance=Jac)
UF.pcoa = ordinate(saanichCR, "PCoA", distance=UF)
wUF.pcoa = ordinate(saanichCR, "PCoA", distance=wUF)
# Set plot theme for all plots
theme_set(theme_classic())
# Plot each PCoA colored by sample
plot_ordination(saanichCR, BC.pcoa, color="sample") +
#Make points larger
geom_point(size = 4) +
#Remove legend
theme(legend.position="none") +
# Add title
labs(title="Bray-Curtis")
plot_ordination(saanichCR, Jac.pcoa, color="sample") +
#Make points larger
geom_point(size = 4) +
#Remove legend
theme(legend.position="none") +
# Add title
labs(title="Jaccard")
plot_ordination(saanichCR, UF.pcoa, color="sample") +
#Make points larger
geom_point(size = 4) +
#Remove legend
theme(legend.position="none") +
# Add title
labs(title="UniFrac")
plot_ordination(saanichCR, wUF.pcoa, color="sample")+
#Make points larger
geom_point(size = 4) +
#Move legend
theme(legend.position="bottom") +
# Add title
labs(title="weighted UniFrac")
################################################################################
# Non-metric multidimensional scaling (nMDS)
################################################################################
BC.nmds = ordinate(saanichCR, "NMDS", distance=BC)
Jac.nmds = ordinate(saanichCR, "NMDS", distance=Jac)
UF.nmds = ordinate(saanichCR, "NMDS", distance=UF)
wUF.nmds = ordinate(saanichCR, "NMDS", distance=wUF)
# Set plot theme for all plots
theme_set(theme_classic())
# Plot each PCoA colored by sample
plot_ordination(saanichCR, BC.nmds, color="sample") +
#Make points larger
geom_point(size = 4) +
#Remove legend
theme(legend.position="none") +
# Add title
labs(title="Bray-Curtis")
plot_ordination(saanichCR, Jac.nmds, color="sample") +
#Make points larger
geom_point(size = 4) +
#Remove legend
theme(legend.position="none") +
# Add title
labs(title="Jaccard")
saanichCR
?castor
################################################################################
# Screening by phylogenetic scale
################################################################################
Hnodes <- get_all_node_depths(treeC.root)
hist(Hnodes, n=150)
hist(Hnodes, n=150, xlim=c(0,.5))
#Create incremental list of values from 0 to 0.3, going up by 0.025 each time
slices <- c(seq(from=0, to=0.3, by=0.025))
#transpose our OTU table as a matrix.
OTU.mat <- OTU %>%
# set sample name as row names
column_to_rownames(var = "sample") %>%
# Transpose
t() %>%
#Format to matrix
as.matrix()
#run the analysis for Jaccard using our custom functions
multi.Jac <- BDTT(similarity_slices = slices,
tree = treeC.root, sampleOTUs = OTU.mat,
metric = "jac")
#run the analysis for Jaccard using our custom functions
multi.Beta<- BDTT(similarity_slices = slices,
tree = treeC.root, sampleOTUs = OTU.mat)
class(multi.Beta)
dim(multi.Beta)
# There are 4 dimensions
dimnames(multi.Beta)
multi.Jac=multi.Beta[,"Jac",,]
multi.BC=multi.Beta[,"Bray",,]
#Save results
saveRDS(multi.Jac, "results/multi_Jac.RDS")
saveRDS(multi.BC, "results/multi_BC.RDS")
################################################################################
# Exploring array results
################################################################################
class(multi.Jac)
dim(multi.Jac)
multi.Jac[1,,]
################################################################################
# Statistical links to metadata
################################################################################
# list variables of interest
predictors <- c("O2_uM", "NO3_uM", "H2S_uM", "Depth_m")
# Create data frame of all slice, variable, metric combinations
StatsRes <- expand.grid(similarity_slices=as.character(slices),
predictors=predictors,
metric=c("Jac","BC"))
# Add blank columns to hold results
StatsRes[["F.Model"]] = StatsRes[["R2"]] = StatsRes[["Pr(>F)"]]=NA
#View first few rows of data frame
head(StatsRes)
#"fill" it with our results from PERMANOVA of all models constructed in a loop.
# For each slice
for (i in as.character(slices)){
# For each variable of interest
for (j in predictors) {
# Calculate PERMANOVA for Jaccard
res <- unlist(adonis(
formula = multi.Jac[i,,] ~
data.frame(sample_data(saanichCR))[,j])$aov.tab[1,c(4,5,6)])
# Add results to table
StatsRes[(StatsRes$metric=="Jac") &
(StatsRes$predictors==j) &
(StatsRes$similarity_slices==i), 4:6] = res
# Calculate PERMANOVA for Bray-Curtis
res <- unlist(adonis(
formula = multi.BC[i,,] ~
data.frame(sample_data(saanichCR))[,j])$aov.tab[1,c(4,5,6)])
# Add results to table
StatsRes[(StatsRes$metric=="BC") &
(StatsRes$predictors==j) &
(StatsRes$similarity_slices==i),4:6] = res
}
}
# plot the fit profiles using R^2 along our phylogenetic time scale.
ggplot(StatsRes,
aes(y=R2, x=similarity_slices, color=predictors,
group=predictors)) +
geom_point(size=4) +
geom_line(size=1) +
facet_wrap(~metric) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#View first few rows of data frame
head(StatsRes)
rm(list=ls())
library(MCMCglmm)
library(caper)
getwd("/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/Primates/PGLS/Data/MammalTrees_fix.tre")
getwd("/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/Primates/PGLS/")
setwd("/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/Primates/PGLS/")
# Example
tree=read.tree("Data/MammalTrees_fix.tre")
Alpha_div=read.table("Data/adiv_forFlo.txt")
View(Alpha_div)
Alpha_div=read.table("Data/adiv_forFlo.txt",header = T)
head(Alpha_div)
tree
plot(tree)
# MCMCglmm
inv.phylo<-inverseA(tree,nodes="TIPS",scale=TRUE)
library(phytools)
force.ultrametric(tree)
tree=force.ultrametric(tree)
plot(tree)
# MCMCglmm
inv.phylo<-inverseA(tree,nodes="TIPS",scale=TRUE)
inv.phylo
Ginv=list(Species=inv.phylo$Ainv)
Ginv
prior<-list(G=list(G1=list(V=1,nu=0.02)),R=list(V=1,nu=0.02))
Alpha_div
model_simple<-MCMCglmm(observed_otus_bac ~ observed_otus_bac,random=~Genus_species,family="gaussian",ginverse=Ginv,prior=prior,data=Alpha_div,nitt=50000,burnin=1000,thin=500)
Ginv=list(Genus_species=inv.phylo$Ainv)
prior<-list(G=list(G1=list(V=1,nu=0.02)),R=list(V=1,nu=0.02))
model_simple<-MCMCglmm(observed_otus_bac ~ observed_otus_bac,random=~Genus_species,family="gaussian",ginverse=Ginv,prior=prior,data=Alpha_div,nitt=50000,burnin=1000,thin=500)
model_simple<-MCMCglmm(observed_otus_bac ~ observed_otus_euks,random=~Genus_species,family="gaussian",ginverse=Ginv,prior=prior,data=Alpha_div,nitt=50000,burnin=1000,thin=500)
summary(model_simple)
lambda <- model_simple$VCV[,'Species']/(model_simple$VCV[,'Species']+model_simple$VCV[,'units'])
lambda <- model_simple$VCV[,'Genus_species']/(model_simple$VCV[,'Genus_species']+model_simple$VCV[,'units'])
mean(lambda)
ggplot(aes(y=observed_otus_bac,x=observed_otus_euks,colour=Genus_species),data=Alpha_div)+geom_point()
ggplot(aes(x=observed_otus_bac,y=observed_otus_euks,colour=Genus_species),data=Alpha_div)+geom_point()
